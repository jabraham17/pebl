#ifndef CODEGEN_BINARY_OPERATOR
#define CODEGEN_BINARY_OPERATOR(op, lhsType, rhsType, resType, funcName)
#endif
#ifndef CODEGEN_UNARY_OPERATOR
#define CODEGEN_UNARY_OPERATOR(op, operandType, resType, funcName)
#endif

//
// "" is any type
// "*" is any ptr type
//
// funcName(ctx:Context*, op:OperatorType, lhs:cg_value*, rhs:cg_value*):cg_value*
//

#define Int "int64"
#define Int8 "int8"
#define Bool "bool"
#define Ptr "*"
#define Any ""


//
// Int Math
//
CODEGEN_BINARY_OPERATOR(PLUS, Int, Int, Int, sintBOp)
CODEGEN_BINARY_OPERATOR(MINUS, Int, Int, Int, sintBOp)
CODEGEN_BINARY_OPERATOR(MULT, Int, Int, Int, sintBOp)
CODEGEN_BINARY_OPERATOR(DIVIDE, Int, Int, Int, sintBOp)

CODEGEN_BINARY_OPERATOR(PLUS, Int8, Int8, Int8, sintBOp)
CODEGEN_BINARY_OPERATOR(MINUS, Int8, Int8, Int8, sintBOp)
CODEGEN_BINARY_OPERATOR(MULT, Int8, Int8, Int8, sintBOp)
CODEGEN_BINARY_OPERATOR(DIVIDE, Int8, Int8, Int8, sintBOp)

//
// boolean logic
//
// CODEGEN_BINARY_OPERATOR(AND, Any, Any, Bool, booleanAnd)
// CODEGEN_BINARY_OPERATOR(OR, Int, Int, booleanOr)
// CODEGEN_BINARY_OPERATOR(AND, Int, Ptr, booleanOr)
// CODEGEN_BINARY_OPERATOR(AND, Ptr, Int, booleanOr)
// CODEGEN_BINARY_OPERATOR(AND, Ptr, Ptr, booleanOr)
// CODEGEN_BINARY_OPERATOR(OR, Int8, Int8, booleanOr)

//
// Int Comparison
//
CODEGEN_BINARY_OPERATOR(LT, Int, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(GT, Int, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(LTEQ, Int, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(GTEQ, Int, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(EQ, Int, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(NEQ, Int, Int, Bool, compare)
CODEGEN_UNARY_OPERATOR(NOT, Int, Bool, negate)

CODEGEN_BINARY_OPERATOR(LT, Int8, Int8, Bool, compare)
CODEGEN_BINARY_OPERATOR(GT, Int8, Int8, Bool, compare)
CODEGEN_BINARY_OPERATOR(LTEQ, Int8, Int8, Bool, compare)
CODEGEN_BINARY_OPERATOR(GTEQ, Int8, Int8, Bool, compare)
CODEGEN_BINARY_OPERATOR(EQ, Int8, Int8, Bool, compare)
CODEGEN_BINARY_OPERATOR(NEQ, Int8, Int8, Bool, compare)
CODEGEN_UNARY_OPERATOR(NOT, Int8, Bool, negate)

//
// Ptr Comparison
//
CODEGEN_BINARY_OPERATOR(LT, Ptr, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(GT, Ptr, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(LTEQ, Ptr, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(GTEQ, Ptr, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(EQ, Ptr, Int, Bool, compare)
CODEGEN_BINARY_OPERATOR(NEQ, Ptr, Int, Bool, compare)

CODEGEN_BINARY_OPERATOR(LT, Int, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(GT, Int, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(LTEQ, Int, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(GTEQ, Int, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(EQ, Int, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(NEQ, Int, Ptr, Bool, compare)

CODEGEN_BINARY_OPERATOR(LT, Ptr, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(GT, Ptr, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(LTEQ, Ptr, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(GTEQ, Ptr, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(EQ, Ptr, Ptr, Bool, compare)
CODEGEN_BINARY_OPERATOR(NEQ, Ptr, Ptr, Bool, compare)

CODEGEN_UNARY_OPERATOR(NOT, Ptr, Bool, negate)

//
// Address computation
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
CODEGEN_BINARY_OPERATOR(PLUS, Int, Ptr, Any, addrOffset)
CODEGEN_BINARY_OPERATOR(PLUS, Ptr, Int, Any, addrOffset)
CODEGEN_BINARY_OPERATOR(MINUS, Int, Ptr, Any, addrOffset)
CODEGEN_BINARY_OPERATOR(MINUS, Ptr, Int, Any, addrOffset)

//
// Pointers
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
CODEGEN_UNARY_OPERATOR(TAKE_ADDRESS, Any, Any, getAddressOfValue)
CODEGEN_UNARY_OPERATOR(PTR_DEREFERENCE, Any, Any, getValueAtAddress)

#undef Int
#undef Ptr
#undef Any

#undef CODEGEN_BINARY_OPERATOR
#undef CODEGEN_UNARY_OPERATOR
