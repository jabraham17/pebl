

#ifndef BINARY_EXPR
#define BINARY_EXPR(op, lhsType, rhsType, resType, codegenFunc)
#endif
#ifndef UNARY_EXPR
#define UNARY_EXPR(op, operandType, resType, codegenFunc)
#endif


//
// "" is any type
// "*" is any ptr type
// These are generic types, and may require extra work to disambiguate
//

#define Int64 "int64"
#define Int8 "int8"
#define Bool "bool"
#define Ptr "*"
#define Any ""



//
// Int Math
//
BINARY_EXPR(PLUS, Int64, Int64, Int64, sintBOp)
BINARY_EXPR(MINUS, Int64, Int64, Int64, sintBOp)
BINARY_EXPR(MULT, Int64, Int64, Int64, sintBOp)
BINARY_EXPR(DIVIDE, Int64, Int64, Int64, sintBOp)

BINARY_EXPR(PLUS, Int8, Int8, Int8, sintBOp)
BINARY_EXPR(MINUS, Int8, Int8, Int8, sintBOp)
BINARY_EXPR(MULT, Int8, Int8, Int8, sintBOp)
BINARY_EXPR(DIVIDE, Int8, Int8, Int8, sintBOp)

//
// boolean logic
//
BINARY_EXPR(AND, Any, Any, Bool, booleanAnd)
// BINARY_EXPR(OR, Any, Any, Bool, booleanOr)

BINARY_EXPR(EQ, Bool, Bool, Bool, compare)
BINARY_EXPR(NEQ, Bool, Bool, Bool, compare)
UNARY_EXPR(NOT, Bool, Bool, negate)

//
// Int Comparison
//
BINARY_EXPR(LT, Int64, Int64, Bool, compare)
BINARY_EXPR(GT, Int64, Int64, Bool, compare)
BINARY_EXPR(LTEQ, Int64, Int64, Bool, compare)
BINARY_EXPR(GTEQ, Int64, Int64, Bool, compare)
BINARY_EXPR(EQ, Int64, Int64, Bool, compare)
BINARY_EXPR(NEQ, Int64, Int64, Bool, compare)
UNARY_EXPR(NOT, Int64, Bool, negate)

BINARY_EXPR(LT, Int8, Int8, Bool, compare)
BINARY_EXPR(GT, Int8, Int8, Bool, compare)
BINARY_EXPR(LTEQ, Int8, Int8, Bool, compare)
BINARY_EXPR(GTEQ, Int8, Int8, Bool, compare)
BINARY_EXPR(EQ, Int8, Int8, Bool, compare)
BINARY_EXPR(NEQ, Int8, Int8, Bool, compare)
UNARY_EXPR(NOT, Int8, Bool, negate)

//
// Ptr Comparison
//
BINARY_EXPR(LT, Ptr, Int64, Bool, compare)
BINARY_EXPR(GT, Ptr, Int64, Bool, compare)
BINARY_EXPR(LTEQ, Ptr, Int64, Bool, compare)
BINARY_EXPR(GTEQ, Ptr, Int64, Bool, compare)
BINARY_EXPR(EQ, Ptr, Int64, Bool, compare)
BINARY_EXPR(NEQ, Ptr, Int64, Bool, compare)

BINARY_EXPR(LT, Int64, Ptr, Bool, compare)
BINARY_EXPR(GT, Int64, Ptr, Bool, compare)
BINARY_EXPR(LTEQ, Int64, Ptr, Bool, compare)
BINARY_EXPR(GTEQ, Int64, Ptr, Bool, compare)
BINARY_EXPR(EQ, Int64, Ptr, Bool, compare)
BINARY_EXPR(NEQ, Int64, Ptr, Bool, compare)

BINARY_EXPR(LT, Ptr, Ptr, Bool, compare)
BINARY_EXPR(GT, Ptr, Ptr, Bool, compare)
BINARY_EXPR(LTEQ, Ptr, Ptr, Bool, compare)
BINARY_EXPR(GTEQ, Ptr, Ptr, Bool, compare)
BINARY_EXPR(EQ, Ptr, Ptr, Bool, compare)
BINARY_EXPR(NEQ, Ptr, Ptr, Bool, compare)

UNARY_EXPR(NOT, Ptr, Bool, negate)

BINARY_EXPR(CAST, Any, Any, Any, cast)

//
// Address computation
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
BINARY_EXPR(PLUS, Int64, Ptr, Any, addrOffset)
BINARY_EXPR(PLUS, Ptr, Int64, Any, addrOffset)
BINARY_EXPR(MINUS, Int64, Ptr, Any, addrOffset)
BINARY_EXPR(MINUS, Ptr, Int64, Any, addrOffset)

//
// Pointers
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
UNARY_EXPR(TAKE_ADDRESS, Any, Any, getAddressOfValue)
UNARY_EXPR(PTR_DEREFERENCE, Any, Any, getValueAtAddress)


#undef Int64
#undef Int8
#undef Bool
#undef Ptr
#undef Any

#undef BINARY_EXPR
#undef COMPLEX_BINARY_EXPR
#undef UNARY_EXPR
#undef COMPLEX_UNARY_EXPR
