

#ifndef BINARY_EXPR
#define BINARY_EXPR(op, lhsType, rhsType, resType, codegenFunc)
#endif
#ifndef UNARY_EXPR
#define UNARY_EXPR(op, operandType, resType, codegenFunc)
#endif


//
// "" is any type
// "*" is any ptr type
// These are generic types, and may require extra work to disambiguate
//

#define Int64 "int64"
#define Int8 "int8"
#define Bool "bool"
#define Char "char"
#define Ptr "*"
#define Any ""

//
// Address computation
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
BINARY_EXPR(PLUS, Int64, Ptr, Any, addrOffset)
BINARY_EXPR(PLUS, Ptr, Int64, Any, addrOffset)
BINARY_EXPR(MINUS, Int64, Ptr, Any, addrOffset)
BINARY_EXPR(MINUS, Ptr, Int64, Any, addrOffset)

//
// Int Math
//
BINARY_EXPR(PLUS, Any, Any, Any, sintBOp)
BINARY_EXPR(MINUS, Any, Any, Any, sintBOp)
BINARY_EXPR(MULT, Any, Any, Any, sintBOp)
BINARY_EXPR(DIVIDE, Any, Any, Any, sintBOp)

//
// boolean logic
//
BINARY_EXPR(AND, Any, Any, Bool, booleanAnd)
BINARY_EXPR(OR, Any, Any, Bool, booleanOr)
UNARY_EXPR(NOT, Any, Bool, negate)

//
// Int Comparison
//
BINARY_EXPR(LT, Any, Any, Bool, compare)
BINARY_EXPR(GT, Any, Any, Bool, compare)
BINARY_EXPR(LTEQ, Any, Any, Bool, compare)
BINARY_EXPR(GTEQ, Any, Any, Bool, compare)
BINARY_EXPR(EQ, Any, Any, Bool, compare)
BINARY_EXPR(NEQ, Any, Any, Bool, compare)

//
// Casting
//
BINARY_EXPR(CAST, Any, Any, Any, cast)

// TODO: add ptr difference

//
// Pointers
//
// the result type of these is the type of the Ptr passed in
// so "Any" is used, and mostly ignored
UNARY_EXPR(TAKE_ADDRESS, Any, Any, getAddressOfValue)
UNARY_EXPR(PTR_DEREFERENCE, Any, Any, getValueAtAddress)


#undef Int64
#undef Int8
#undef Bool
#undef Char
#undef Ptr
#undef Any

#undef BINARY_EXPR
#undef COMPLEX_BINARY_EXPR
#undef UNARY_EXPR
#undef COMPLEX_UNARY_EXPR
