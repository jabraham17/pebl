extern func print(s: string): void;
func println(s: string): void {
  print(s);
  print("\n");
}

extern func intToString(i:int):string;
extern func stringToInt(i:string):int;

extern func ptrToString(p:void*):string;

func allocate(n:int):void*;

func printInt(prefix: string, i: int, suffix: string): void {
  print(prefix);
  print(intToString(i));
  println(suffix);
}

type nodeType = {x:int; next:nodeType*;}
func createNodeType(x:int):nodeType* {
  let np: nodeType* = allocate(sizeof(nodeType));
  np->x = x;
  np->next = 0;
  return np;
}
func appendNodeType(head_ptr:nodeType**, n:nodeType*):void {
  if (*head_ptr) == 0 {
    *head_ptr = n;
  } else {
    let temp: nodeType* = *head_ptr;
    while (temp->next) != 0 {
      temp = temp->next;
    }
    temp->next = n;
  }
}

func printNodeType(head:nodeType*):void {
  if head == 0 {
    return;
  }
  printInt("node: x=",head->x,"");
  printNodeType(head->next);
}

func main(args: string*, nargs: int): int {

  let head: nodeType* = createNodeType(1);
  appendNodeType(&head, createNodeType(2));
  appendNodeType(&head, createNodeType(3));
  appendNodeType(&head, createNodeType(4));
  appendNodeType(&head, createNodeType(5));

  printNodeType(head);

  return 0;
}
